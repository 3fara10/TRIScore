syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.example.networking.grpcprotocol.generated";
option java_outer_classname = "CompetitionProtobufs";
option csharp_namespace = "CompetitionClient.Grpc";
option optimize_for = SPEED;


package competition;

service CompetitionService {

  rpc Login (LoginRequest) returns (LoginResponse);
  rpc Logout (LogoutRequest) returns (LogoutResponse);
  rpc RegisterReferee (RegisterRefereeRequest) returns (RegisterRefereeResponse);

  rpc GetAllParticipantsSortedByName (GetAllParticipantsRequest) returns (GetAllParticipantsResponse);
  rpc GetParticipantsWithResultsForEvent (GetParticipantsForEventRequest) returns (GetParticipantsForEventResponse);

  rpc AddResult (AddResultRequest) returns (AddResultResponse);

  rpc RegisterForUpdates (RegisterForUpdatesRequest) returns (stream UpdateNotification);
}


message UUID {
  string value = 1;
}

message Event {
  UUID id = 1;
  string name = 2;
}

message Referee {
  UUID id = 1;
  string name = 2;
  UUID eventId = 3;
  string eventName = 4;
  string username = 5;
  string password = 6;
}

message Participant {
  UUID id = 1;
  string name = 2;
}

message Result {
  UUID id = 1;
  UUID participantId = 2;
  string participantName = 3;
  UUID eventId = 4;
  string eventName = 5;
  int32 points = 6;
}

message ParticipantResult {
  UUID id = 1;
  UUID participantId = 2;
  string name = 3;
  int32 points = 4;
  UUID eventId = 5;
}

// Request/Response messages
message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  enum ResponseType {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
  }
  ResponseType type = 1;
  string error = 2;
  Referee referee = 3;
}

message LogoutRequest {
  UUID refereeId = 1;
}

message LogoutResponse {
  enum ResponseType {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
  }
  ResponseType type = 1;
  string error = 2;
}

message RegisterRefereeRequest {
  string name = 1;
  UUID eventId = 2;
  string eventName = 3;
  string username = 4;
  string password = 5;
}

message RegisterRefereeResponse {
  enum ResponseType {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
  }
  ResponseType type = 1;
  string error = 2;
  Referee referee = 3;
}

message GetAllParticipantsRequest {
  // Empty request
}

message GetAllParticipantsResponse {
  enum ResponseType {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
    DATA_FOUND = 3;
  }
  ResponseType type = 1;
  string error = 2;
  repeated ParticipantResult participants = 3;
}

message GetParticipantsForEventRequest {
  UUID eventId = 1;
}

message GetParticipantsForEventResponse {
  enum ResponseType {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
    DATA_FOUND = 3;
  }
  ResponseType type = 1;
  string error = 2;
  repeated ParticipantResult participants = 3;
}

message AddResultRequest {
  UUID participantId = 1;
  UUID eventId = 2;
  int32 points = 3;
}

message AddResultResponse {
  enum ResponseType {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
    RESULT_ADDED = 3;
  }
  ResponseType type = 1;
  string error = 2;
  Result result = 3;
}

message RegisterForUpdatesRequest {
  UUID refereeId = 1;
}

message UpdateNotification {
  enum NotificationType {
    UNKNOWN = 0;
    UPDATE = 1;
    OBSERVER_REGISTERED = 2;
    UNREGISTER_OBSERVER_REGISTERED = 3;
  }
  NotificationType type = 1;
}